// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateMessage.proto

package org.apache.spark.sql.execution.streaming.state;

public final class StateMessage {
  private StateMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code org.apache.spark.sql.execution.streaming.state.HandleState}
   */
  public enum HandleState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CREATED = 0;</code>
     */
    CREATED(0),
    /**
     * <code>INITIALIZED = 1;</code>
     */
    INITIALIZED(1),
    /**
     * <code>DATA_PROCESSED = 2;</code>
     */
    DATA_PROCESSED(2),
    /**
     * <code>TIMER_PROCESSED = 3;</code>
     */
    TIMER_PROCESSED(3),
    /**
     * <code>CLOSED = 4;</code>
     */
    CLOSED(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CREATED = 0;</code>
     */
    public static final int CREATED_VALUE = 0;
    /**
     * <code>INITIALIZED = 1;</code>
     */
    public static final int INITIALIZED_VALUE = 1;
    /**
     * <code>DATA_PROCESSED = 2;</code>
     */
    public static final int DATA_PROCESSED_VALUE = 2;
    /**
     * <code>TIMER_PROCESSED = 3;</code>
     */
    public static final int TIMER_PROCESSED_VALUE = 3;
    /**
     * <code>CLOSED = 4;</code>
     */
    public static final int CLOSED_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HandleState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HandleState forNumber(int value) {
      switch (value) {
        case 0: return CREATED;
        case 1: return INITIALIZED;
        case 2: return DATA_PROCESSED;
        case 3: return TIMER_PROCESSED;
        case 4: return CLOSED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HandleState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HandleState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HandleState>() {
            public HandleState findValueByNumber(int number) {
              return HandleState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final HandleState[] VALUES = values();

    public static HandleState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HandleState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.apache.spark.sql.execution.streaming.state.HandleState)
  }

  public interface StateRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     * @return Whether the statefulProcessorCall field is set.
     */
    boolean hasStatefulProcessorCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     * @return The statefulProcessorCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getStatefulProcessorCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder getStatefulProcessorCallOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     * @return Whether the stateVariableRequest field is set.
     */
    boolean hasStateVariableRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     * @return The stateVariableRequest.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getStateVariableRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder getStateVariableRequestOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     * @return Whether the implicitGroupingKeyRequest field is set.
     */
    boolean hasImplicitGroupingKeyRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     * @return The implicitGroupingKeyRequest.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getImplicitGroupingKeyRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder getImplicitGroupingKeyRequestOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     * @return Whether the timerRequest field is set.
     */
    boolean hasTimerRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     * @return The timerRequest.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getTimerRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder getTimerRequestOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateRequest}
   */
  public static final class StateRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateRequest)
      StateRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateRequest.newBuilder() to construct.
    private StateRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      STATEFULPROCESSORCALL(2),
      STATEVARIABLEREQUEST(3),
      IMPLICITGROUPINGKEYREQUEST(4),
      TIMERREQUEST(5),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 2: return STATEFULPROCESSORCALL;
          case 3: return STATEVARIABLEREQUEST;
          case 4: return IMPLICITGROUPINGKEYREQUEST;
          case 5: return TIMERREQUEST;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int STATEFULPROCESSORCALL_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     * @return Whether the statefulProcessorCall field is set.
     */
    @java.lang.Override
    public boolean hasStatefulProcessorCall() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     * @return The statefulProcessorCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getStatefulProcessorCall() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder getStatefulProcessorCallOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
    }

    public static final int STATEVARIABLEREQUEST_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     * @return Whether the stateVariableRequest field is set.
     */
    @java.lang.Override
    public boolean hasStateVariableRequest() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     * @return The stateVariableRequest.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getStateVariableRequest() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder getStateVariableRequestOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
    }

    public static final int IMPLICITGROUPINGKEYREQUEST_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     * @return Whether the implicitGroupingKeyRequest field is set.
     */
    @java.lang.Override
    public boolean hasImplicitGroupingKeyRequest() {
      return methodCase_ == 4;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     * @return The implicitGroupingKeyRequest.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getImplicitGroupingKeyRequest() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder getImplicitGroupingKeyRequestOrBuilder() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
    }

    public static final int TIMERREQUEST_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     * @return Whether the timerRequest field is set.
     */
    @java.lang.Override
    public boolean hasTimerRequest() {
      return methodCase_ == 5;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     * @return The timerRequest.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getTimerRequest() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder getTimerRequestOrBuilder() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (version_ != 0) {
        output.writeInt32(1, version_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_);
      }
      if (methodCase_ == 4) {
        output.writeMessage(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_);
      }
      if (methodCase_ == 5) {
        output.writeMessage(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_);
      }
      if (methodCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_);
      }
      if (methodCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest) obj;

      if (getVersion()
          != other.getVersion()) return false;
      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 2:
          if (!getStatefulProcessorCall()
              .equals(other.getStatefulProcessorCall())) return false;
          break;
        case 3:
          if (!getStateVariableRequest()
              .equals(other.getStateVariableRequest())) return false;
          break;
        case 4:
          if (!getImplicitGroupingKeyRequest()
              .equals(other.getImplicitGroupingKeyRequest())) return false;
          break;
        case 5:
          if (!getTimerRequest()
              .equals(other.getTimerRequest())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      switch (methodCase_) {
        case 2:
          hash = (37 * hash) + STATEFULPROCESSORCALL_FIELD_NUMBER;
          hash = (53 * hash) + getStatefulProcessorCall().hashCode();
          break;
        case 3:
          hash = (37 * hash) + STATEVARIABLEREQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getStateVariableRequest().hashCode();
          break;
        case 4:
          hash = (37 * hash) + IMPLICITGROUPINGKEYREQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getImplicitGroupingKeyRequest().hashCode();
          break;
        case 5:
          hash = (37 * hash) + TIMERREQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getTimerRequest().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        version_ = 0;

        if (statefulProcessorCallBuilder_ != null) {
          statefulProcessorCallBuilder_.clear();
        }
        if (stateVariableRequestBuilder_ != null) {
          stateVariableRequestBuilder_.clear();
        }
        if (implicitGroupingKeyRequestBuilder_ != null) {
          implicitGroupingKeyRequestBuilder_.clear();
        }
        if (timerRequestBuilder_ != null) {
          timerRequestBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest(this);
        result.version_ = version_;
        if (methodCase_ == 2) {
          if (statefulProcessorCallBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = statefulProcessorCallBuilder_.build();
          }
        }
        if (methodCase_ == 3) {
          if (stateVariableRequestBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = stateVariableRequestBuilder_.build();
          }
        }
        if (methodCase_ == 4) {
          if (implicitGroupingKeyRequestBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = implicitGroupingKeyRequestBuilder_.build();
          }
        }
        if (methodCase_ == 5) {
          if (timerRequestBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = timerRequestBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.getDefaultInstance()) return this;
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        switch (other.getMethodCase()) {
          case STATEFULPROCESSORCALL: {
            mergeStatefulProcessorCall(other.getStatefulProcessorCall());
            break;
          }
          case STATEVARIABLEREQUEST: {
            mergeStateVariableRequest(other.getStateVariableRequest());
            break;
          }
          case IMPLICITGROUPINGKEYREQUEST: {
            mergeImplicitGroupingKeyRequest(other.getImplicitGroupingKeyRequest());
            break;
          }
          case TIMERREQUEST: {
            mergeTimerRequest(other.getTimerRequest());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                version_ = input.readInt32();

                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getStatefulProcessorCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getStateVariableRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getImplicitGroupingKeyRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getTimerRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 5;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private int version_ ;
      /**
       * <code>int32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <code>int32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder> statefulProcessorCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       * @return Whether the statefulProcessorCall field is set.
       */
      @java.lang.Override
      public boolean hasStatefulProcessorCall() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       * @return The statefulProcessorCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getStatefulProcessorCall() {
        if (statefulProcessorCallBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return statefulProcessorCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      public Builder setStatefulProcessorCall(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall value) {
        if (statefulProcessorCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          statefulProcessorCallBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      public Builder setStatefulProcessorCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder builderForValue) {
        if (statefulProcessorCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          statefulProcessorCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      public Builder mergeStatefulProcessorCall(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall value) {
        if (statefulProcessorCallBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            statefulProcessorCallBuilder_.mergeFrom(value);
          } else {
            statefulProcessorCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      public Builder clearStatefulProcessorCall() {
        if (statefulProcessorCallBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          statefulProcessorCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder getStatefulProcessorCallBuilder() {
        return getStatefulProcessorCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder getStatefulProcessorCallOrBuilder() {
        if ((methodCase_ == 2) && (statefulProcessorCallBuilder_ != null)) {
          return statefulProcessorCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall statefulProcessorCall = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder> 
          getStatefulProcessorCallFieldBuilder() {
        if (statefulProcessorCallBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
          }
          statefulProcessorCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return statefulProcessorCallBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder> stateVariableRequestBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       * @return Whether the stateVariableRequest field is set.
       */
      @java.lang.Override
      public boolean hasStateVariableRequest() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       * @return The stateVariableRequest.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getStateVariableRequest() {
        if (stateVariableRequestBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return stateVariableRequestBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      public Builder setStateVariableRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest value) {
        if (stateVariableRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          stateVariableRequestBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      public Builder setStateVariableRequest(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder builderForValue) {
        if (stateVariableRequestBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          stateVariableRequestBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      public Builder mergeStateVariableRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest value) {
        if (stateVariableRequestBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            stateVariableRequestBuilder_.mergeFrom(value);
          } else {
            stateVariableRequestBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      public Builder clearStateVariableRequest() {
        if (stateVariableRequestBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          stateVariableRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder getStateVariableRequestBuilder() {
        return getStateVariableRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder getStateVariableRequestOrBuilder() {
        if ((methodCase_ == 3) && (stateVariableRequestBuilder_ != null)) {
          return stateVariableRequestBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateVariableRequest stateVariableRequest = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder> 
          getStateVariableRequestFieldBuilder() {
        if (stateVariableRequestBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
          }
          stateVariableRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();;
        return stateVariableRequestBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder> implicitGroupingKeyRequestBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       * @return Whether the implicitGroupingKeyRequest field is set.
       */
      @java.lang.Override
      public boolean hasImplicitGroupingKeyRequest() {
        return methodCase_ == 4;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       * @return The implicitGroupingKeyRequest.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getImplicitGroupingKeyRequest() {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
        } else {
          if (methodCase_ == 4) {
            return implicitGroupingKeyRequestBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      public Builder setImplicitGroupingKeyRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest value) {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          implicitGroupingKeyRequestBuilder_.setMessage(value);
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      public Builder setImplicitGroupingKeyRequest(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder builderForValue) {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          implicitGroupingKeyRequestBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      public Builder mergeImplicitGroupingKeyRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest value) {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          if (methodCase_ == 4 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 4) {
            implicitGroupingKeyRequestBuilder_.mergeFrom(value);
          } else {
            implicitGroupingKeyRequestBuilder_.setMessage(value);
          }
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      public Builder clearImplicitGroupingKeyRequest() {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
          }
          implicitGroupingKeyRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder getImplicitGroupingKeyRequestBuilder() {
        return getImplicitGroupingKeyRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder getImplicitGroupingKeyRequestOrBuilder() {
        if ((methodCase_ == 4) && (implicitGroupingKeyRequestBuilder_ != null)) {
          return implicitGroupingKeyRequestBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest implicitGroupingKeyRequest = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder> 
          getImplicitGroupingKeyRequestFieldBuilder() {
        if (implicitGroupingKeyRequestBuilder_ == null) {
          if (!(methodCase_ == 4)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
          }
          implicitGroupingKeyRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 4;
        onChanged();;
        return implicitGroupingKeyRequestBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder> timerRequestBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       * @return Whether the timerRequest field is set.
       */
      @java.lang.Override
      public boolean hasTimerRequest() {
        return methodCase_ == 5;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       * @return The timerRequest.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getTimerRequest() {
        if (timerRequestBuilder_ == null) {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
        } else {
          if (methodCase_ == 5) {
            return timerRequestBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      public Builder setTimerRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest value) {
        if (timerRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          timerRequestBuilder_.setMessage(value);
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      public Builder setTimerRequest(
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder builderForValue) {
        if (timerRequestBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          timerRequestBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      public Builder mergeTimerRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest value) {
        if (timerRequestBuilder_ == null) {
          if (methodCase_ == 5 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 5) {
            timerRequestBuilder_.mergeFrom(value);
          } else {
            timerRequestBuilder_.setMessage(value);
          }
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      public Builder clearTimerRequest() {
        if (timerRequestBuilder_ == null) {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
          }
          timerRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder getTimerRequestBuilder() {
        return getTimerRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder getTimerRequestOrBuilder() {
        if ((methodCase_ == 5) && (timerRequestBuilder_ != null)) {
          return timerRequestBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerRequest timerRequest = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder> 
          getTimerRequestFieldBuilder() {
        if (timerRequestBuilder_ == null) {
          if (!(methodCase_ == 5)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
          }
          timerRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 5;
        onChanged();;
        return timerRequestBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateRequest>() {
      @java.lang.Override
      public StateRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 statusCode = 1;</code>
     * @return The statusCode.
     */
    int getStatusCode();

    /**
     * <code>string errorMessage = 2;</code>
     * @return The errorMessage.
     */
    java.lang.String getErrorMessage();
    /**
     * <code>string errorMessage = 2;</code>
     * @return The bytes for errorMessage.
     */
    com.google.protobuf.ByteString
        getErrorMessageBytes();

    /**
     * <code>bytes value = 3;</code>
     * @return The value.
     */
    com.google.protobuf.ByteString getValue();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateResponse}
   */
  public static final class StateResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateResponse)
      StateResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateResponse.newBuilder() to construct.
    private StateResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateResponse() {
      errorMessage_ = "";
      value_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.Builder.class);
    }

    public static final int STATUSCODE_FIELD_NUMBER = 1;
    private int statusCode_;
    /**
     * <code>int32 statusCode = 1;</code>
     * @return The statusCode.
     */
    @java.lang.Override
    public int getStatusCode() {
      return statusCode_;
    }

    public static final int ERRORMESSAGE_FIELD_NUMBER = 2;
    private volatile java.lang.Object errorMessage_;
    /**
     * <code>string errorMessage = 2;</code>
     * @return The errorMessage.
     */
    @java.lang.Override
    public java.lang.String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        errorMessage_ = s;
        return s;
      }
    }
    /**
     * <code>string errorMessage = 2;</code>
     * @return The bytes for errorMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString value_;
    /**
     * <code>bytes value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (statusCode_ != 0) {
        output.writeInt32(1, statusCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorMessage_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, errorMessage_);
      }
      if (!value_.isEmpty()) {
        output.writeBytes(3, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (statusCode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, statusCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorMessage_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, errorMessage_);
      }
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse) obj;

      if (getStatusCode()
          != other.getStatusCode()) return false;
      if (!getErrorMessage()
          .equals(other.getErrorMessage())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATUSCODE_FIELD_NUMBER;
      hash = (53 * hash) + getStatusCode();
      hash = (37 * hash) + ERRORMESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getErrorMessage().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateResponse)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        statusCode_ = 0;

        errorMessage_ = "";

        value_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse(this);
        result.statusCode_ = statusCode_;
        result.errorMessage_ = errorMessage_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.getDefaultInstance()) return this;
        if (other.getStatusCode() != 0) {
          setStatusCode(other.getStatusCode());
        }
        if (!other.getErrorMessage().isEmpty()) {
          errorMessage_ = other.errorMessage_;
          onChanged();
        }
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                statusCode_ = input.readInt32();

                break;
              } // case 8
              case 18: {
                errorMessage_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                value_ = input.readBytes();

                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int statusCode_ ;
      /**
       * <code>int32 statusCode = 1;</code>
       * @return The statusCode.
       */
      @java.lang.Override
      public int getStatusCode() {
        return statusCode_;
      }
      /**
       * <code>int32 statusCode = 1;</code>
       * @param value The statusCode to set.
       * @return This builder for chaining.
       */
      public Builder setStatusCode(int value) {
        
        statusCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 statusCode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatusCode() {
        
        statusCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object errorMessage_ = "";
      /**
       * <code>string errorMessage = 2;</code>
       * @return The errorMessage.
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          errorMessage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @return The bytes for errorMessage.
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @param value The errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        errorMessage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorMessage() {
        
        errorMessage_ = getDefaultInstance().getErrorMessage();
        onChanged();
        return this;
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @param value The bytes for errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        errorMessage_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes value = 3;</code>
       * @return The value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>bytes value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateResponse)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateResponse>() {
      @java.lang.Override
      public StateResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatefulProcessorCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     * @return Whether the setHandleState field is set.
     */
    boolean hasSetHandleState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     * @return The setHandleState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     * @return Whether the getValueState field is set.
     */
    boolean hasGetValueState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     * @return The getValueState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetValueState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetValueStateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     * @return Whether the getListState field is set.
     */
    boolean hasGetListState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     * @return The getListState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetListState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetListStateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     * @return Whether the getMapState field is set.
     */
    boolean hasGetMapState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     * @return The getMapState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetMapState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetMapStateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     * @return Whether the timerStateCall field is set.
     */
    boolean hasTimerStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     * @return The timerStateCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getTimerStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder getTimerStateCallOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall}
   */
  public static final class StatefulProcessorCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall)
      StatefulProcessorCallOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StatefulProcessorCall.newBuilder() to construct.
    private StatefulProcessorCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StatefulProcessorCall() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StatefulProcessorCall();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SETHANDLESTATE(1),
      GETVALUESTATE(2),
      GETLISTSTATE(3),
      GETMAPSTATE(4),
      TIMERSTATECALL(5),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return SETHANDLESTATE;
          case 2: return GETVALUESTATE;
          case 3: return GETLISTSTATE;
          case 4: return GETMAPSTATE;
          case 5: return TIMERSTATECALL;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int SETHANDLESTATE_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     * @return Whether the setHandleState field is set.
     */
    @java.lang.Override
    public boolean hasSetHandleState() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     * @return The setHandleState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
    }

    public static final int GETVALUESTATE_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     * @return Whether the getValueState field is set.
     */
    @java.lang.Override
    public boolean hasGetValueState() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     * @return The getValueState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetValueState() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetValueStateOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }

    public static final int GETLISTSTATE_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     * @return Whether the getListState field is set.
     */
    @java.lang.Override
    public boolean hasGetListState() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     * @return The getListState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetListState() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetListStateOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }

    public static final int GETMAPSTATE_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     * @return Whether the getMapState field is set.
     */
    @java.lang.Override
    public boolean hasGetMapState() {
      return methodCase_ == 4;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     * @return The getMapState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetMapState() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetMapStateOrBuilder() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
    }

    public static final int TIMERSTATECALL_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     * @return Whether the timerStateCall field is set.
     */
    @java.lang.Override
    public boolean hasTimerStateCall() {
      return methodCase_ == 5;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     * @return The timerStateCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getTimerStateCall() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder getTimerStateCallOrBuilder() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 4) {
        output.writeMessage(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 5) {
        output.writeMessage(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_);
      }
      if (methodCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getSetHandleState()
              .equals(other.getSetHandleState())) return false;
          break;
        case 2:
          if (!getGetValueState()
              .equals(other.getGetValueState())) return false;
          break;
        case 3:
          if (!getGetListState()
              .equals(other.getGetListState())) return false;
          break;
        case 4:
          if (!getGetMapState()
              .equals(other.getGetMapState())) return false;
          break;
        case 5:
          if (!getTimerStateCall()
              .equals(other.getTimerStateCall())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + SETHANDLESTATE_FIELD_NUMBER;
          hash = (53 * hash) + getSetHandleState().hashCode();
          break;
        case 2:
          hash = (37 * hash) + GETVALUESTATE_FIELD_NUMBER;
          hash = (53 * hash) + getGetValueState().hashCode();
          break;
        case 3:
          hash = (37 * hash) + GETLISTSTATE_FIELD_NUMBER;
          hash = (53 * hash) + getGetListState().hashCode();
          break;
        case 4:
          hash = (37 * hash) + GETMAPSTATE_FIELD_NUMBER;
          hash = (53 * hash) + getGetMapState().hashCode();
          break;
        case 5:
          hash = (37 * hash) + TIMERSTATECALL_FIELD_NUMBER;
          hash = (53 * hash) + getTimerStateCall().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (setHandleStateBuilder_ != null) {
          setHandleStateBuilder_.clear();
        }
        if (getValueStateBuilder_ != null) {
          getValueStateBuilder_.clear();
        }
        if (getListStateBuilder_ != null) {
          getListStateBuilder_.clear();
        }
        if (getMapStateBuilder_ != null) {
          getMapStateBuilder_.clear();
        }
        if (timerStateCallBuilder_ != null) {
          timerStateCallBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall(this);
        if (methodCase_ == 1) {
          if (setHandleStateBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = setHandleStateBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (getValueStateBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getValueStateBuilder_.build();
          }
        }
        if (methodCase_ == 3) {
          if (getListStateBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getListStateBuilder_.build();
          }
        }
        if (methodCase_ == 4) {
          if (getMapStateBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getMapStateBuilder_.build();
          }
        }
        if (methodCase_ == 5) {
          if (timerStateCallBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = timerStateCallBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case SETHANDLESTATE: {
            mergeSetHandleState(other.getSetHandleState());
            break;
          }
          case GETVALUESTATE: {
            mergeGetValueState(other.getGetValueState());
            break;
          }
          case GETLISTSTATE: {
            mergeGetListState(other.getGetListState());
            break;
          }
          case GETMAPSTATE: {
            mergeGetMapState(other.getGetMapState());
            break;
          }
          case TIMERSTATECALL: {
            mergeTimerStateCall(other.getTimerStateCall());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getSetHandleStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getGetValueStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getGetListStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getGetMapStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getTimerStateCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 5;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder> setHandleStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       * @return Whether the setHandleState field is set.
       */
      @java.lang.Override
      public boolean hasSetHandleState() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       * @return The setHandleState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState() {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return setHandleStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      public Builder setSetHandleState(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState value) {
        if (setHandleStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          setHandleStateBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      public Builder setSetHandleState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder builderForValue) {
        if (setHandleStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          setHandleStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      public Builder mergeSetHandleState(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState value) {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            setHandleStateBuilder_.mergeFrom(value);
          } else {
            setHandleStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      public Builder clearSetHandleState() {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          setHandleStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder getSetHandleStateBuilder() {
        return getSetHandleStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder() {
        if ((methodCase_ == 1) && (setHandleStateBuilder_ != null)) {
          return setHandleStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder> 
          getSetHandleStateFieldBuilder() {
        if (setHandleStateBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
          }
          setHandleStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return setHandleStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> getValueStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       * @return Whether the getValueState field is set.
       */
      @java.lang.Override
      public boolean hasGetValueState() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       * @return The getValueState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetValueState() {
        if (getValueStateBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return getValueStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      public Builder setGetValueState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getValueStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getValueStateBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      public Builder setGetValueState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder builderForValue) {
        if (getValueStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getValueStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      public Builder mergeGetValueState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getValueStateBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            getValueStateBuilder_.mergeFrom(value);
          } else {
            getValueStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      public Builder clearGetValueState() {
        if (getValueStateBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          getValueStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder getGetValueStateBuilder() {
        return getGetValueStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetValueStateOrBuilder() {
        if ((methodCase_ == 2) && (getValueStateBuilder_ != null)) {
          return getValueStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getValueState = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> 
          getGetValueStateFieldBuilder() {
        if (getValueStateBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
          }
          getValueStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return getValueStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> getListStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       * @return Whether the getListState field is set.
       */
      @java.lang.Override
      public boolean hasGetListState() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       * @return The getListState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetListState() {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return getListStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      public Builder setGetListState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getListStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getListStateBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      public Builder setGetListState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder builderForValue) {
        if (getListStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getListStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      public Builder mergeGetListState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            getListStateBuilder_.mergeFrom(value);
          } else {
            getListStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      public Builder clearGetListState() {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          getListStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder getGetListStateBuilder() {
        return getGetListStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetListStateOrBuilder() {
        if ((methodCase_ == 3) && (getListStateBuilder_ != null)) {
          return getListStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getListState = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> 
          getGetListStateFieldBuilder() {
        if (getListStateBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
          }
          getListStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();;
        return getListStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> getMapStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       * @return Whether the getMapState field is set.
       */
      @java.lang.Override
      public boolean hasGetMapState() {
        return methodCase_ == 4;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       * @return The getMapState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getGetMapState() {
        if (getMapStateBuilder_ == null) {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        } else {
          if (methodCase_ == 4) {
            return getMapStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      public Builder setGetMapState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getMapStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getMapStateBuilder_.setMessage(value);
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      public Builder setGetMapState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder builderForValue) {
        if (getMapStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getMapStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      public Builder mergeGetMapState(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand value) {
        if (getMapStateBuilder_ == null) {
          if (methodCase_ == 4 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 4) {
            getMapStateBuilder_.mergeFrom(value);
          } else {
            getMapStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      public Builder clearGetMapState() {
        if (getMapStateBuilder_ == null) {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
          }
          getMapStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder getGetMapStateBuilder() {
        return getGetMapStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder getGetMapStateOrBuilder() {
        if ((methodCase_ == 4) && (getMapStateBuilder_ != null)) {
          return getMapStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StateCallCommand getMapState = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder> 
          getGetMapStateFieldBuilder() {
        if (getMapStateBuilder_ == null) {
          if (!(methodCase_ == 4)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
          }
          getMapStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 4;
        onChanged();;
        return getMapStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder> timerStateCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       * @return Whether the timerStateCall field is set.
       */
      @java.lang.Override
      public boolean hasTimerStateCall() {
        return methodCase_ == 5;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       * @return The timerStateCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getTimerStateCall() {
        if (timerStateCallBuilder_ == null) {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
        } else {
          if (methodCase_ == 5) {
            return timerStateCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      public Builder setTimerStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand value) {
        if (timerStateCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          timerStateCallBuilder_.setMessage(value);
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      public Builder setTimerStateCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder builderForValue) {
        if (timerStateCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          timerStateCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      public Builder mergeTimerStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand value) {
        if (timerStateCallBuilder_ == null) {
          if (methodCase_ == 5 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 5) {
            timerStateCallBuilder_.mergeFrom(value);
          } else {
            timerStateCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      public Builder clearTimerStateCall() {
        if (timerStateCallBuilder_ == null) {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
          }
          timerStateCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder getTimerStateCallBuilder() {
        return getTimerStateCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder getTimerStateCallOrBuilder() {
        if ((methodCase_ == 5) && (timerStateCallBuilder_ != null)) {
          return timerStateCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand timerStateCall = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder> 
          getTimerStateCallFieldBuilder() {
        if (timerStateCallBuilder_ == null) {
          if (!(methodCase_ == 5)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
          }
          timerStateCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 5;
        onChanged();;
        return timerStateCallBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StatefulProcessorCall)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StatefulProcessorCall>
        PARSER = new com.google.protobuf.AbstractParser<StatefulProcessorCall>() {
      @java.lang.Override
      public StatefulProcessorCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StatefulProcessorCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StatefulProcessorCall> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateVariableRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateVariableRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     * @return Whether the valueStateCall field is set.
     */
    boolean hasValueStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     * @return The valueStateCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getValueStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder getValueStateCallOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     * @return Whether the listStateCall field is set.
     */
    boolean hasListStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     * @return The listStateCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateVariableRequest}
   */
  public static final class StateVariableRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateVariableRequest)
      StateVariableRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateVariableRequest.newBuilder() to construct.
    private StateVariableRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateVariableRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateVariableRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      VALUESTATECALL(1),
      LISTSTATECALL(2),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return VALUESTATECALL;
          case 2: return LISTSTATECALL;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int VALUESTATECALL_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     * @return Whether the valueStateCall field is set.
     */
    @java.lang.Override
    public boolean hasValueStateCall() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     * @return The valueStateCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getValueStateCall() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder getValueStateCallOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
    }

    public static final int LISTSTATECALL_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     * @return Whether the listStateCall field is set.
     */
    @java.lang.Override
    public boolean hasListStateCall() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     * @return The listStateCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getValueStateCall()
              .equals(other.getValueStateCall())) return false;
          break;
        case 2:
          if (!getListStateCall()
              .equals(other.getListStateCall())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + VALUESTATECALL_FIELD_NUMBER;
          hash = (53 * hash) + getValueStateCall().hashCode();
          break;
        case 2:
          hash = (37 * hash) + LISTSTATECALL_FIELD_NUMBER;
          hash = (53 * hash) + getListStateCall().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateVariableRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateVariableRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (valueStateCallBuilder_ != null) {
          valueStateCallBuilder_.clear();
        }
        if (listStateCallBuilder_ != null) {
          listStateCallBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest(this);
        if (methodCase_ == 1) {
          if (valueStateCallBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = valueStateCallBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (listStateCallBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = listStateCallBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case VALUESTATECALL: {
            mergeValueStateCall(other.getValueStateCall());
            break;
          }
          case LISTSTATECALL: {
            mergeListStateCall(other.getListStateCall());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getValueStateCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getListStateCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder> valueStateCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       * @return Whether the valueStateCall field is set.
       */
      @java.lang.Override
      public boolean hasValueStateCall() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       * @return The valueStateCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getValueStateCall() {
        if (valueStateCallBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return valueStateCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      public Builder setValueStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall value) {
        if (valueStateCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          valueStateCallBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      public Builder setValueStateCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder builderForValue) {
        if (valueStateCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          valueStateCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      public Builder mergeValueStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall value) {
        if (valueStateCallBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            valueStateCallBuilder_.mergeFrom(value);
          } else {
            valueStateCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      public Builder clearValueStateCall() {
        if (valueStateCallBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          valueStateCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder getValueStateCallBuilder() {
        return getValueStateCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder getValueStateCallOrBuilder() {
        if ((methodCase_ == 1) && (valueStateCallBuilder_ != null)) {
          return valueStateCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateCall valueStateCall = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder> 
          getValueStateCallFieldBuilder() {
        if (valueStateCallBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
          }
          valueStateCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return valueStateCallBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder> listStateCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       * @return Whether the listStateCall field is set.
       */
      @java.lang.Override
      public boolean hasListStateCall() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       * @return The listStateCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall() {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return listStateCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      public Builder setListStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall value) {
        if (listStateCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          listStateCallBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      public Builder setListStateCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder builderForValue) {
        if (listStateCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          listStateCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      public Builder mergeListStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall value) {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            listStateCallBuilder_.mergeFrom(value);
          } else {
            listStateCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      public Builder clearListStateCall() {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          listStateCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder getListStateCallBuilder() {
        return getListStateCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder() {
        if ((methodCase_ == 2) && (listStateCallBuilder_ != null)) {
          return listStateCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder> 
          getListStateCallFieldBuilder() {
        if (listStateCallBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
          }
          listStateCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return listStateCallBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateVariableRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateVariableRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateVariableRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateVariableRequest>() {
      @java.lang.Override
      public StateVariableRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateVariableRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateVariableRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateVariableRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImplicitGroupingKeyRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     * @return Whether the setImplicitKey field is set.
     */
    boolean hasSetImplicitKey();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     * @return The setImplicitKey.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getSetImplicitKey();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder getSetImplicitKeyOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     * @return Whether the removeImplicitKey field is set.
     */
    boolean hasRemoveImplicitKey();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     * @return The removeImplicitKey.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getRemoveImplicitKey();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder getRemoveImplicitKeyOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest}
   */
  public static final class ImplicitGroupingKeyRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest)
      ImplicitGroupingKeyRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ImplicitGroupingKeyRequest.newBuilder() to construct.
    private ImplicitGroupingKeyRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImplicitGroupingKeyRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ImplicitGroupingKeyRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SETIMPLICITKEY(1),
      REMOVEIMPLICITKEY(2),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return SETIMPLICITKEY;
          case 2: return REMOVEIMPLICITKEY;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int SETIMPLICITKEY_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     * @return Whether the setImplicitKey field is set.
     */
    @java.lang.Override
    public boolean hasSetImplicitKey() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     * @return The setImplicitKey.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getSetImplicitKey() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder getSetImplicitKeyOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
    }

    public static final int REMOVEIMPLICITKEY_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     * @return Whether the removeImplicitKey field is set.
     */
    @java.lang.Override
    public boolean hasRemoveImplicitKey() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     * @return The removeImplicitKey.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getRemoveImplicitKey() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder getRemoveImplicitKeyOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getSetImplicitKey()
              .equals(other.getSetImplicitKey())) return false;
          break;
        case 2:
          if (!getRemoveImplicitKey()
              .equals(other.getRemoveImplicitKey())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + SETIMPLICITKEY_FIELD_NUMBER;
          hash = (53 * hash) + getSetImplicitKey().hashCode();
          break;
        case 2:
          hash = (37 * hash) + REMOVEIMPLICITKEY_FIELD_NUMBER;
          hash = (53 * hash) + getRemoveImplicitKey().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (setImplicitKeyBuilder_ != null) {
          setImplicitKeyBuilder_.clear();
        }
        if (removeImplicitKeyBuilder_ != null) {
          removeImplicitKeyBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest(this);
        if (methodCase_ == 1) {
          if (setImplicitKeyBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = setImplicitKeyBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (removeImplicitKeyBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = removeImplicitKeyBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case SETIMPLICITKEY: {
            mergeSetImplicitKey(other.getSetImplicitKey());
            break;
          }
          case REMOVEIMPLICITKEY: {
            mergeRemoveImplicitKey(other.getRemoveImplicitKey());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getSetImplicitKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getRemoveImplicitKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder> setImplicitKeyBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       * @return Whether the setImplicitKey field is set.
       */
      @java.lang.Override
      public boolean hasSetImplicitKey() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       * @return The setImplicitKey.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getSetImplicitKey() {
        if (setImplicitKeyBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return setImplicitKeyBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      public Builder setSetImplicitKey(org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey value) {
        if (setImplicitKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          setImplicitKeyBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      public Builder setSetImplicitKey(
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder builderForValue) {
        if (setImplicitKeyBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          setImplicitKeyBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      public Builder mergeSetImplicitKey(org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey value) {
        if (setImplicitKeyBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            setImplicitKeyBuilder_.mergeFrom(value);
          } else {
            setImplicitKeyBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      public Builder clearSetImplicitKey() {
        if (setImplicitKeyBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          setImplicitKeyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder getSetImplicitKeyBuilder() {
        return getSetImplicitKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder getSetImplicitKeyOrBuilder() {
        if ((methodCase_ == 1) && (setImplicitKeyBuilder_ != null)) {
          return setImplicitKeyBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetImplicitKey setImplicitKey = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder> 
          getSetImplicitKeyFieldBuilder() {
        if (setImplicitKeyBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
          }
          setImplicitKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return setImplicitKeyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder> removeImplicitKeyBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       * @return Whether the removeImplicitKey field is set.
       */
      @java.lang.Override
      public boolean hasRemoveImplicitKey() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       * @return The removeImplicitKey.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getRemoveImplicitKey() {
        if (removeImplicitKeyBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return removeImplicitKeyBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      public Builder setRemoveImplicitKey(org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey value) {
        if (removeImplicitKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          removeImplicitKeyBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      public Builder setRemoveImplicitKey(
          org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder builderForValue) {
        if (removeImplicitKeyBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          removeImplicitKeyBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      public Builder mergeRemoveImplicitKey(org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey value) {
        if (removeImplicitKeyBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            removeImplicitKeyBuilder_.mergeFrom(value);
          } else {
            removeImplicitKeyBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      public Builder clearRemoveImplicitKey() {
        if (removeImplicitKeyBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          removeImplicitKeyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder getRemoveImplicitKeyBuilder() {
        return getRemoveImplicitKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder getRemoveImplicitKeyOrBuilder() {
        if ((methodCase_ == 2) && (removeImplicitKeyBuilder_ != null)) {
          return removeImplicitKeyBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey removeImplicitKey = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder> 
          getRemoveImplicitKeyFieldBuilder() {
        if (removeImplicitKeyBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
          }
          removeImplicitKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return removeImplicitKeyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ImplicitGroupingKeyRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImplicitGroupingKeyRequest>
        PARSER = new com.google.protobuf.AbstractParser<ImplicitGroupingKeyRequest>() {
      @java.lang.Override
      public ImplicitGroupingKeyRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ImplicitGroupingKeyRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImplicitGroupingKeyRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ImplicitGroupingKeyRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.TimerRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     * @return Whether the timerValueRequest field is set.
     */
    boolean hasTimerValueRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     * @return The timerValueRequest.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getTimerValueRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder getTimerValueRequestOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     * @return Whether the expiryTimerRequest field is set.
     */
    boolean hasExpiryTimerRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     * @return The expiryTimerRequest.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getExpiryTimerRequest();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder getExpiryTimerRequestOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerRequest}
   */
  public static final class TimerRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.TimerRequest)
      TimerRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimerRequest.newBuilder() to construct.
    private TimerRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimerRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimerRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TIMERVALUEREQUEST(1),
      EXPIRYTIMERREQUEST(2),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return TIMERVALUEREQUEST;
          case 2: return EXPIRYTIMERREQUEST;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int TIMERVALUEREQUEST_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     * @return Whether the timerValueRequest field is set.
     */
    @java.lang.Override
    public boolean hasTimerValueRequest() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     * @return The timerValueRequest.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getTimerValueRequest() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder getTimerValueRequestOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
    }

    public static final int EXPIRYTIMERREQUEST_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     * @return Whether the expiryTimerRequest field is set.
     */
    @java.lang.Override
    public boolean hasExpiryTimerRequest() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     * @return The expiryTimerRequest.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getExpiryTimerRequest() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder getExpiryTimerRequestOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getTimerValueRequest()
              .equals(other.getTimerValueRequest())) return false;
          break;
        case 2:
          if (!getExpiryTimerRequest()
              .equals(other.getExpiryTimerRequest())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + TIMERVALUEREQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getTimerValueRequest().hashCode();
          break;
        case 2:
          hash = (37 * hash) + EXPIRYTIMERREQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getExpiryTimerRequest().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.TimerRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (timerValueRequestBuilder_ != null) {
          timerValueRequestBuilder_.clear();
        }
        if (expiryTimerRequestBuilder_ != null) {
          expiryTimerRequestBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest(this);
        if (methodCase_ == 1) {
          if (timerValueRequestBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = timerValueRequestBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (expiryTimerRequestBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = expiryTimerRequestBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case TIMERVALUEREQUEST: {
            mergeTimerValueRequest(other.getTimerValueRequest());
            break;
          }
          case EXPIRYTIMERREQUEST: {
            mergeExpiryTimerRequest(other.getExpiryTimerRequest());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTimerValueRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExpiryTimerRequestFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder> timerValueRequestBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       * @return Whether the timerValueRequest field is set.
       */
      @java.lang.Override
      public boolean hasTimerValueRequest() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       * @return The timerValueRequest.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getTimerValueRequest() {
        if (timerValueRequestBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return timerValueRequestBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      public Builder setTimerValueRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest value) {
        if (timerValueRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          timerValueRequestBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      public Builder setTimerValueRequest(
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder builderForValue) {
        if (timerValueRequestBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          timerValueRequestBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      public Builder mergeTimerValueRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest value) {
        if (timerValueRequestBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            timerValueRequestBuilder_.mergeFrom(value);
          } else {
            timerValueRequestBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      public Builder clearTimerValueRequest() {
        if (timerValueRequestBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          timerValueRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder getTimerValueRequestBuilder() {
        return getTimerValueRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder getTimerValueRequestOrBuilder() {
        if ((methodCase_ == 1) && (timerValueRequestBuilder_ != null)) {
          return timerValueRequestBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.TimerValueRequest timerValueRequest = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder> 
          getTimerValueRequestFieldBuilder() {
        if (timerValueRequestBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
          }
          timerValueRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return timerValueRequestBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder> expiryTimerRequestBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       * @return Whether the expiryTimerRequest field is set.
       */
      @java.lang.Override
      public boolean hasExpiryTimerRequest() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       * @return The expiryTimerRequest.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getExpiryTimerRequest() {
        if (expiryTimerRequestBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return expiryTimerRequestBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      public Builder setExpiryTimerRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest value) {
        if (expiryTimerRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          expiryTimerRequestBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      public Builder setExpiryTimerRequest(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder builderForValue) {
        if (expiryTimerRequestBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          expiryTimerRequestBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      public Builder mergeExpiryTimerRequest(org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest value) {
        if (expiryTimerRequestBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            expiryTimerRequestBuilder_.mergeFrom(value);
          } else {
            expiryTimerRequestBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      public Builder clearExpiryTimerRequest() {
        if (expiryTimerRequestBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          expiryTimerRequestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder getExpiryTimerRequestBuilder() {
        return getExpiryTimerRequestFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder getExpiryTimerRequestOrBuilder() {
        if ((methodCase_ == 2) && (expiryTimerRequestBuilder_ != null)) {
          return expiryTimerRequestBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest expiryTimerRequest = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder> 
          getExpiryTimerRequestFieldBuilder() {
        if (expiryTimerRequestBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
          }
          expiryTimerRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return expiryTimerRequestBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.TimerRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.TimerRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimerRequest>
        PARSER = new com.google.protobuf.AbstractParser<TimerRequest>() {
      @java.lang.Override
      public TimerRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimerRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimerRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimerValueRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.TimerValueRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     * @return Whether the getProcessingTimer field is set.
     */
    boolean hasGetProcessingTimer();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     * @return The getProcessingTimer.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getGetProcessingTimer();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder getGetProcessingTimerOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     * @return Whether the getWatermark field is set.
     */
    boolean hasGetWatermark();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     * @return The getWatermark.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getGetWatermark();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder getGetWatermarkOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerValueRequest}
   */
  public static final class TimerValueRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.TimerValueRequest)
      TimerValueRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimerValueRequest.newBuilder() to construct.
    private TimerValueRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimerValueRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimerValueRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      GETPROCESSINGTIMER(1),
      GETWATERMARK(2),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return GETPROCESSINGTIMER;
          case 2: return GETWATERMARK;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int GETPROCESSINGTIMER_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     * @return Whether the getProcessingTimer field is set.
     */
    @java.lang.Override
    public boolean hasGetProcessingTimer() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     * @return The getProcessingTimer.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getGetProcessingTimer() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder getGetProcessingTimerOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
    }

    public static final int GETWATERMARK_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     * @return Whether the getWatermark field is set.
     */
    @java.lang.Override
    public boolean hasGetWatermark() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     * @return The getWatermark.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getGetWatermark() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder getGetWatermarkOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getGetProcessingTimer()
              .equals(other.getGetProcessingTimer())) return false;
          break;
        case 2:
          if (!getGetWatermark()
              .equals(other.getGetWatermark())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + GETPROCESSINGTIMER_FIELD_NUMBER;
          hash = (53 * hash) + getGetProcessingTimer().hashCode();
          break;
        case 2:
          hash = (37 * hash) + GETWATERMARK_FIELD_NUMBER;
          hash = (53 * hash) + getGetWatermark().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerValueRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.TimerValueRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (getProcessingTimerBuilder_ != null) {
          getProcessingTimerBuilder_.clear();
        }
        if (getWatermarkBuilder_ != null) {
          getWatermarkBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest(this);
        if (methodCase_ == 1) {
          if (getProcessingTimerBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getProcessingTimerBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (getWatermarkBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getWatermarkBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case GETPROCESSINGTIMER: {
            mergeGetProcessingTimer(other.getGetProcessingTimer());
            break;
          }
          case GETWATERMARK: {
            mergeGetWatermark(other.getGetWatermark());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getGetProcessingTimerFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getGetWatermarkFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder> getProcessingTimerBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       * @return Whether the getProcessingTimer field is set.
       */
      @java.lang.Override
      public boolean hasGetProcessingTimer() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       * @return The getProcessingTimer.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getGetProcessingTimer() {
        if (getProcessingTimerBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return getProcessingTimerBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      public Builder setGetProcessingTimer(org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime value) {
        if (getProcessingTimerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getProcessingTimerBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      public Builder setGetProcessingTimer(
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder builderForValue) {
        if (getProcessingTimerBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getProcessingTimerBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      public Builder mergeGetProcessingTimer(org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime value) {
        if (getProcessingTimerBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            getProcessingTimerBuilder_.mergeFrom(value);
          } else {
            getProcessingTimerBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      public Builder clearGetProcessingTimer() {
        if (getProcessingTimerBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          getProcessingTimerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder getGetProcessingTimerBuilder() {
        return getGetProcessingTimerFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder getGetProcessingTimerOrBuilder() {
        if ((methodCase_ == 1) && (getProcessingTimerBuilder_ != null)) {
          return getProcessingTimerBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetProcessingTime getProcessingTimer = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder> 
          getGetProcessingTimerFieldBuilder() {
        if (getProcessingTimerBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
          }
          getProcessingTimerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return getProcessingTimerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder> getWatermarkBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       * @return Whether the getWatermark field is set.
       */
      @java.lang.Override
      public boolean hasGetWatermark() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       * @return The getWatermark.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getGetWatermark() {
        if (getWatermarkBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return getWatermarkBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      public Builder setGetWatermark(org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark value) {
        if (getWatermarkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getWatermarkBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      public Builder setGetWatermark(
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder builderForValue) {
        if (getWatermarkBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getWatermarkBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      public Builder mergeGetWatermark(org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark value) {
        if (getWatermarkBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            getWatermarkBuilder_.mergeFrom(value);
          } else {
            getWatermarkBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      public Builder clearGetWatermark() {
        if (getWatermarkBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          getWatermarkBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder getGetWatermarkBuilder() {
        return getGetWatermarkFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder getGetWatermarkOrBuilder() {
        if ((methodCase_ == 2) && (getWatermarkBuilder_ != null)) {
          return getWatermarkBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetWatermark getWatermark = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder> 
          getGetWatermarkFieldBuilder() {
        if (getWatermarkBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
          }
          getWatermarkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return getWatermarkBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.TimerValueRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.TimerValueRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimerValueRequest>
        PARSER = new com.google.protobuf.AbstractParser<TimerValueRequest>() {
      @java.lang.Override
      public TimerValueRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimerValueRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimerValueRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerValueRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExpiryTimerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    long getExpiryTimestampMs();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest}
   */
  public static final class ExpiryTimerRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest)
      ExpiryTimerRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpiryTimerRequest.newBuilder() to construct.
    private ExpiryTimerRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpiryTimerRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpiryTimerRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder.class);
    }

    public static final int EXPIRYTIMESTAMPMS_FIELD_NUMBER = 1;
    private long expiryTimestampMs_;
    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    @java.lang.Override
    public long getExpiryTimestampMs() {
      return expiryTimestampMs_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expiryTimestampMs_ != 0L) {
        output.writeInt64(1, expiryTimestampMs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expiryTimestampMs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, expiryTimestampMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) obj;

      if (getExpiryTimestampMs()
          != other.getExpiryTimestampMs()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPIRYTIMESTAMPMS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getExpiryTimestampMs());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        expiryTimestampMs_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest(this);
        result.expiryTimestampMs_ = expiryTimestampMs_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest.getDefaultInstance()) return this;
        if (other.getExpiryTimestampMs() != 0L) {
          setExpiryTimestampMs(other.getExpiryTimestampMs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                expiryTimestampMs_ = input.readInt64();

                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private long expiryTimestampMs_ ;
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return The expiryTimestampMs.
       */
      @java.lang.Override
      public long getExpiryTimestampMs() {
        return expiryTimestampMs_;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @param value The expiryTimestampMs to set.
       * @return This builder for chaining.
       */
      public Builder setExpiryTimestampMs(long value) {
        
        expiryTimestampMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiryTimestampMs() {
        
        expiryTimestampMs_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ExpiryTimerRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpiryTimerRequest>
        PARSER = new com.google.protobuf.AbstractParser<ExpiryTimerRequest>() {
      @java.lang.Override
      public ExpiryTimerRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExpiryTimerRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpiryTimerRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExpiryTimerRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetProcessingTimeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.GetProcessingTime)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetProcessingTime}
   */
  public static final class GetProcessingTime extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.GetProcessingTime)
      GetProcessingTimeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetProcessingTime.newBuilder() to construct.
    private GetProcessingTime(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetProcessingTime() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetProcessingTime();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime other = (org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetProcessingTime}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.GetProcessingTime)
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime result = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.GetProcessingTime)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.GetProcessingTime)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetProcessingTime>
        PARSER = new com.google.protobuf.AbstractParser<GetProcessingTime>() {
      @java.lang.Override
      public GetProcessingTime parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetProcessingTime> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetProcessingTime> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetProcessingTime getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetWatermarkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.GetWatermark)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetWatermark}
   */
  public static final class GetWatermark extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.GetWatermark)
      GetWatermarkOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetWatermark.newBuilder() to construct.
    private GetWatermark(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetWatermark() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetWatermark();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark other = (org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetWatermark}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.GetWatermark)
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermarkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark result = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.GetWatermark)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.GetWatermark)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetWatermark>
        PARSER = new com.google.protobuf.AbstractParser<GetWatermark>() {
      @java.lang.Override
      public GetWatermark parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetWatermark> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetWatermark> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetWatermark getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateCallCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateCallCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    java.lang.String getStateName();
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>string schema = 2;</code>
     * @return The schema.
     */
    java.lang.String getSchema();
    /**
     * <code>string schema = 2;</code>
     * @return The bytes for schema.
     */
    com.google.protobuf.ByteString
        getSchemaBytes();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateCallCommand}
   */
  public static final class StateCallCommand extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateCallCommand)
      StateCallCommandOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateCallCommand.newBuilder() to construct.
    private StateCallCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateCallCommand() {
      stateName_ = "";
      schema_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateCallCommand();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder.class);
    }

    public static final int STATENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateName_;
    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    @java.lang.Override
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEMA_FIELD_NUMBER = 2;
    private volatile java.lang.Object schema_;
    /**
     * <code>string schema = 2;</code>
     * @return The schema.
     */
    @java.lang.Override
    public java.lang.String getSchema() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schema_ = s;
        return s;
      }
    }
    /**
     * <code>string schema = 2;</code>
     * @return The bytes for schema.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSchemaBytes() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        schema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, schema_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, schema_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (!getSchema()
          .equals(other.getSchema())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATENAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchema().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateCallCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateCallCommand)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        schema_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand(this);
        result.stateName_ = stateName_;
        result.schema_ = schema_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        if (!other.getSchema().isEmpty()) {
          schema_ = other.schema_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stateName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                schema_ = input.readStringRequireUtf8();

                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private java.lang.Object stateName_ = "";
      /**
       * <code>string stateName = 1;</code>
       * @return The stateName.
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @return The bytes for stateName.
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The bytes for stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object schema_ = "";
      /**
       * <code>string schema = 2;</code>
       * @return The schema.
       */
      public java.lang.String getSchema() {
        java.lang.Object ref = schema_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          schema_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string schema = 2;</code>
       * @return The bytes for schema.
       */
      public com.google.protobuf.ByteString
          getSchemaBytes() {
        java.lang.Object ref = schema_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          schema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string schema = 2;</code>
       * @param value The schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchema(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        schema_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string schema = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSchema() {
        
        schema_ = getDefaultInstance().getSchema();
        onChanged();
        return this;
      }
      /**
       * <code>string schema = 2;</code>
       * @param value The bytes for schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchemaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        schema_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateCallCommand)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateCallCommand)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateCallCommand>
        PARSER = new com.google.protobuf.AbstractParser<StateCallCommand>() {
      @java.lang.Override
      public StateCallCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateCallCommand> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateCallCommand> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateCallCommand getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TimerStateCallCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     * @return Whether the register field is set.
     */
    boolean hasRegister();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     * @return The register.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getRegister();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder getRegisterOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     * @return Whether the delete field is set.
     */
    boolean hasDelete();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     * @return The delete.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDelete();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder getDeleteOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     * @return Whether the list field is set.
     */
    boolean hasList();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     * @return The list.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getList();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder getListOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand}
   */
  public static final class TimerStateCallCommand extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand)
      TimerStateCallCommandOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TimerStateCallCommand.newBuilder() to construct.
    private TimerStateCallCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TimerStateCallCommand() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TimerStateCallCommand();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      REGISTER(1),
      DELETE(2),
      LIST(3),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return REGISTER;
          case 2: return DELETE;
          case 3: return LIST;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int REGISTER_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     * @return Whether the register field is set.
     */
    @java.lang.Override
    public boolean hasRegister() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     * @return The register.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getRegister() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder getRegisterOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
    }

    public static final int DELETE_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     * @return Whether the delete field is set.
     */
    @java.lang.Override
    public boolean hasDelete() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     * @return The delete.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDelete() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder getDeleteOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
    }

    public static final int LIST_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     * @return Whether the list field is set.
     */
    @java.lang.Override
    public boolean hasList() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     * @return The list.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getList() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder getListOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand other = (org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getRegister()
              .equals(other.getRegister())) return false;
          break;
        case 2:
          if (!getDelete()
              .equals(other.getDelete())) return false;
          break;
        case 3:
          if (!getList()
              .equals(other.getList())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + REGISTER_FIELD_NUMBER;
          hash = (53 * hash) + getRegister().hashCode();
          break;
        case 2:
          hash = (37 * hash) + DELETE_FIELD_NUMBER;
          hash = (53 * hash) + getDelete().hashCode();
          break;
        case 3:
          hash = (37 * hash) + LIST_FIELD_NUMBER;
          hash = (53 * hash) + getList().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand)
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.class, org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (registerBuilder_ != null) {
          registerBuilder_.clear();
        }
        if (deleteBuilder_ != null) {
          deleteBuilder_.clear();
        }
        if (listBuilder_ != null) {
          listBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand result = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand(this);
        if (methodCase_ == 1) {
          if (registerBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = registerBuilder_.build();
          }
        }
        if (methodCase_ == 2) {
          if (deleteBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = deleteBuilder_.build();
          }
        }
        if (methodCase_ == 3) {
          if (listBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = listBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case REGISTER: {
            mergeRegister(other.getRegister());
            break;
          }
          case DELETE: {
            mergeDelete(other.getDelete());
            break;
          }
          case LIST: {
            mergeList(other.getList());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getRegisterFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getDeleteFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getListFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder> registerBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       * @return Whether the register field is set.
       */
      @java.lang.Override
      public boolean hasRegister() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       * @return The register.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getRegister() {
        if (registerBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return registerBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      public Builder setRegister(org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer value) {
        if (registerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          registerBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      public Builder setRegister(
          org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder builderForValue) {
        if (registerBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          registerBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      public Builder mergeRegister(org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer value) {
        if (registerBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            registerBuilder_.mergeFrom(value);
          } else {
            registerBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      public Builder clearRegister() {
        if (registerBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          registerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder getRegisterBuilder() {
        return getRegisterFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder getRegisterOrBuilder() {
        if ((methodCase_ == 1) && (registerBuilder_ != null)) {
          return registerBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.RegisterTimer register = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder> 
          getRegisterFieldBuilder() {
        if (registerBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
          }
          registerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();;
        return registerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder> deleteBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       * @return Whether the delete field is set.
       */
      @java.lang.Override
      public boolean hasDelete() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       * @return The delete.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDelete() {
        if (deleteBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return deleteBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      public Builder setDelete(org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers value) {
        if (deleteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          deleteBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      public Builder setDelete(
          org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder builderForValue) {
        if (deleteBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          deleteBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      public Builder mergeDelete(org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers value) {
        if (deleteBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            deleteBuilder_.mergeFrom(value);
          } else {
            deleteBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      public Builder clearDelete() {
        if (deleteBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          deleteBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder getDeleteBuilder() {
        return getDeleteFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder getDeleteOrBuilder() {
        if ((methodCase_ == 2) && (deleteBuilder_ != null)) {
          return deleteBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.DeleteTimers delete = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder> 
          getDeleteFieldBuilder() {
        if (deleteBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
          }
          deleteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return deleteBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder> listBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       * @return Whether the list field is set.
       */
      @java.lang.Override
      public boolean hasList() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       * @return The list.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getList() {
        if (listBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return listBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      public Builder setList(org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers value) {
        if (listBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          listBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      public Builder setList(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder builderForValue) {
        if (listBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          listBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      public Builder mergeList(org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers value) {
        if (listBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            listBuilder_.mergeFrom(value);
          } else {
            listBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      public Builder clearList() {
        if (listBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          listBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder getListBuilder() {
        return getListFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder getListOrBuilder() {
        if ((methodCase_ == 3) && (listBuilder_ != null)) {
          return listBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListTimers list = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder> 
          getListFieldBuilder() {
        if (listBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
          }
          listBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();;
        return listBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.TimerStateCallCommand)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TimerStateCallCommand>
        PARSER = new com.google.protobuf.AbstractParser<TimerStateCallCommand>() {
      @java.lang.Override
      public TimerStateCallCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TimerStateCallCommand> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TimerStateCallCommand> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.TimerStateCallCommand getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueStateCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ValueStateCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    java.lang.String getStateName();
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return Whether the exists field is set.
     */
    boolean hasExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return The exists.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return Whether the get field is set.
     */
    boolean hasGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return The get.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     * @return Whether the valueStateUpdate field is set.
     */
    boolean hasValueStateUpdate();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     * @return The valueStateUpdate.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getValueStateUpdate();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder getValueStateUpdateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     * @return Whether the clear field is set.
     */
    boolean hasClear();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     * @return The clear.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ValueStateCall}
   */
  public static final class ValueStateCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ValueStateCall)
      ValueStateCallOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValueStateCall.newBuilder() to construct.
    private ValueStateCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValueStateCall() {
      stateName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValueStateCall();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXISTS(2),
      GET(3),
      VALUESTATEUPDATE(4),
      CLEAR(5),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 2: return EXISTS;
          case 3: return GET;
          case 4: return VALUESTATEUPDATE;
          case 5: return CLEAR;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int STATENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateName_;
    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    @java.lang.Override
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXISTS_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return Whether the exists field is set.
     */
    @java.lang.Override
    public boolean hasExists() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return The exists.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }

    public static final int GET_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return Whether the get field is set.
     */
    @java.lang.Override
    public boolean hasGet() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return The get.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }

    public static final int VALUESTATEUPDATE_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     * @return Whether the valueStateUpdate field is set.
     */
    @java.lang.Override
    public boolean hasValueStateUpdate() {
      return methodCase_ == 4;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     * @return The valueStateUpdate.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getValueStateUpdate() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder getValueStateUpdateOrBuilder() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
    }

    public static final int CLEAR_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     * @return Whether the clear field is set.
     */
    @java.lang.Override
    public boolean hasClear() {
      return methodCase_ == 5;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     * @return The clear.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 4) {
        output.writeMessage(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_);
      }
      if (methodCase_ == 5) {
        output.writeMessage(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_);
      }
      if (methodCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 2:
          if (!getExists()
              .equals(other.getExists())) return false;
          break;
        case 3:
          if (!getGet()
              .equals(other.getGet())) return false;
          break;
        case 4:
          if (!getValueStateUpdate()
              .equals(other.getValueStateUpdate())) return false;
          break;
        case 5:
          if (!getClear()
              .equals(other.getClear())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATENAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      switch (methodCase_) {
        case 2:
          hash = (37 * hash) + EXISTS_FIELD_NUMBER;
          hash = (53 * hash) + getExists().hashCode();
          break;
        case 3:
          hash = (37 * hash) + GET_FIELD_NUMBER;
          hash = (53 * hash) + getGet().hashCode();
          break;
        case 4:
          hash = (37 * hash) + VALUESTATEUPDATE_FIELD_NUMBER;
          hash = (53 * hash) + getValueStateUpdate().hashCode();
          break;
        case 5:
          hash = (37 * hash) + CLEAR_FIELD_NUMBER;
          hash = (53 * hash) + getClear().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ValueStateCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ValueStateCall)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        if (existsBuilder_ != null) {
          existsBuilder_.clear();
        }
        if (getBuilder_ != null) {
          getBuilder_.clear();
        }
        if (valueStateUpdateBuilder_ != null) {
          valueStateUpdateBuilder_.clear();
        }
        if (clearBuilder_ != null) {
          clearBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall(this);
        result.stateName_ = stateName_;
        if (methodCase_ == 2) {
          if (existsBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = existsBuilder_.build();
          }
        }
        if (methodCase_ == 3) {
          if (getBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getBuilder_.build();
          }
        }
        if (methodCase_ == 4) {
          if (valueStateUpdateBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = valueStateUpdateBuilder_.build();
          }
        }
        if (methodCase_ == 5) {
          if (clearBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = clearBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        switch (other.getMethodCase()) {
          case EXISTS: {
            mergeExists(other.getExists());
            break;
          }
          case GET: {
            mergeGet(other.getGet());
            break;
          }
          case VALUESTATEUPDATE: {
            mergeValueStateUpdate(other.getValueStateUpdate());
            break;
          }
          case CLEAR: {
            mergeClear(other.getClear());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stateName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExistsFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getGetFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getValueStateUpdateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getClearFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 5;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object stateName_ = "";
      /**
       * <code>string stateName = 1;</code>
       * @return The stateName.
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @return The bytes for stateName.
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The bytes for stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> existsBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       * @return Whether the exists field is set.
       */
      @java.lang.Override
      public boolean hasExists() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       * @return The exists.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return existsBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder setExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          existsBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder setExists(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder builderForValue) {
        if (existsBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          existsBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder mergeExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            existsBuilder_.mergeFrom(value);
          } else {
            existsBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder clearExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          existsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder getExistsBuilder() {
        return getExistsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
        if ((methodCase_ == 2) && (existsBuilder_ != null)) {
          return existsBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> 
          getExistsFieldBuilder() {
        if (existsBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
          }
          existsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return existsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> getBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       * @return Whether the get field is set.
       */
      @java.lang.Override
      public boolean hasGet() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       * @return The get.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return getBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder setGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder setGet(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder builderForValue) {
        if (getBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder mergeGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            getBuilder_.mergeFrom(value);
          } else {
            getBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder clearGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          getBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder getGetBuilder() {
        return getGetFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
        if ((methodCase_ == 3) && (getBuilder_ != null)) {
          return getBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> 
          getGetFieldBuilder() {
        if (getBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
          }
          getBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();;
        return getBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder> valueStateUpdateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       * @return Whether the valueStateUpdate field is set.
       */
      @java.lang.Override
      public boolean hasValueStateUpdate() {
        return methodCase_ == 4;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       * @return The valueStateUpdate.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getValueStateUpdate() {
        if (valueStateUpdateBuilder_ == null) {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
        } else {
          if (methodCase_ == 4) {
            return valueStateUpdateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      public Builder setValueStateUpdate(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate value) {
        if (valueStateUpdateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          valueStateUpdateBuilder_.setMessage(value);
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      public Builder setValueStateUpdate(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder builderForValue) {
        if (valueStateUpdateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          valueStateUpdateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      public Builder mergeValueStateUpdate(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate value) {
        if (valueStateUpdateBuilder_ == null) {
          if (methodCase_ == 4 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 4) {
            valueStateUpdateBuilder_.mergeFrom(value);
          } else {
            valueStateUpdateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      public Builder clearValueStateUpdate() {
        if (valueStateUpdateBuilder_ == null) {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
          }
          valueStateUpdateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder getValueStateUpdateBuilder() {
        return getValueStateUpdateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder getValueStateUpdateOrBuilder() {
        if ((methodCase_ == 4) && (valueStateUpdateBuilder_ != null)) {
          return valueStateUpdateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ValueStateUpdate valueStateUpdate = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder> 
          getValueStateUpdateFieldBuilder() {
        if (valueStateUpdateBuilder_ == null) {
          if (!(methodCase_ == 4)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
          }
          valueStateUpdateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 4;
        onChanged();;
        return valueStateUpdateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder> clearBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       * @return Whether the clear field is set.
       */
      @java.lang.Override
      public boolean hasClear() {
        return methodCase_ == 5;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       * @return The clear.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear() {
        if (clearBuilder_ == null) {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        } else {
          if (methodCase_ == 5) {
            return clearBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      public Builder setClear(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear value) {
        if (clearBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          clearBuilder_.setMessage(value);
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      public Builder setClear(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder builderForValue) {
        if (clearBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          clearBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      public Builder mergeClear(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear value) {
        if (clearBuilder_ == null) {
          if (methodCase_ == 5 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 5) {
            clearBuilder_.mergeFrom(value);
          } else {
            clearBuilder_.setMessage(value);
          }
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      public Builder clearClear() {
        if (clearBuilder_ == null) {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
          }
          clearBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder getClearBuilder() {
        return getClearFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder() {
        if ((methodCase_ == 5) && (clearBuilder_ != null)) {
          return clearBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder> 
          getClearFieldBuilder() {
        if (clearBuilder_ == null) {
          if (!(methodCase_ == 5)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
          }
          clearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 5;
        onChanged();;
        return clearBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ValueStateCall)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ValueStateCall)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueStateCall>
        PARSER = new com.google.protobuf.AbstractParser<ValueStateCall>() {
      @java.lang.Override
      public ValueStateCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ValueStateCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueStateCall> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ListStateCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ListStateCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    java.lang.String getStateName();
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return Whether the exists field is set.
     */
    boolean hasExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return The exists.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return Whether the get field is set.
     */
    boolean hasGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return The get.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     * @return Whether the listStatePut field is set.
     */
    boolean hasListStatePut();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     * @return The listStatePut.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getListStatePut();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder getListStatePutOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     * @return Whether the appendValue field is set.
     */
    boolean hasAppendValue();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     * @return The appendValue.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getAppendValue();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder getAppendValueOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     * @return Whether the appendList field is set.
     */
    boolean hasAppendList();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     * @return The appendList.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getAppendList();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder getAppendListOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     * @return Whether the clear field is set.
     */
    boolean hasClear();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     * @return The clear.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder();

    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStateCall}
   */
  public static final class ListStateCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ListStateCall)
      ListStateCallOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ListStateCall.newBuilder() to construct.
    private ListStateCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ListStateCall() {
      stateName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ListStateCall();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder.class);
    }

    private int methodCase_ = 0;
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXISTS(2),
      GET(3),
      LISTSTATEPUT(4),
      APPENDVALUE(5),
      APPENDLIST(6),
      CLEAR(7),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 2: return EXISTS;
          case 3: return GET;
          case 4: return LISTSTATEPUT;
          case 5: return APPENDVALUE;
          case 6: return APPENDLIST;
          case 7: return CLEAR;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int STATENAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object stateName_;
    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    @java.lang.Override
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXISTS_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return Whether the exists field is set.
     */
    @java.lang.Override
    public boolean hasExists() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     * @return The exists.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }

    public static final int GET_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return Whether the get field is set.
     */
    @java.lang.Override
    public boolean hasGet() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     * @return The get.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }

    public static final int LISTSTATEPUT_FIELD_NUMBER = 4;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     * @return Whether the listStatePut field is set.
     */
    @java.lang.Override
    public boolean hasListStatePut() {
      return methodCase_ == 4;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     * @return The listStatePut.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getListStatePut() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder getListStatePutOrBuilder() {
      if (methodCase_ == 4) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
    }

    public static final int APPENDVALUE_FIELD_NUMBER = 5;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     * @return Whether the appendValue field is set.
     */
    @java.lang.Override
    public boolean hasAppendValue() {
      return methodCase_ == 5;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     * @return The appendValue.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getAppendValue() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder getAppendValueOrBuilder() {
      if (methodCase_ == 5) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
    }

    public static final int APPENDLIST_FIELD_NUMBER = 6;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     * @return Whether the appendList field is set.
     */
    @java.lang.Override
    public boolean hasAppendList() {
      return methodCase_ == 6;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     * @return The appendList.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getAppendList() {
      if (methodCase_ == 6) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder getAppendListOrBuilder() {
      if (methodCase_ == 6) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
    }

    public static final int CLEAR_FIELD_NUMBER = 7;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     * @return Whether the clear field is set.
     */
    @java.lang.Override
    public boolean hasClear() {
      return methodCase_ == 7;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     * @return The clear.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear() {
      if (methodCase_ == 7) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder() {
      if (methodCase_ == 7) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 4) {
        output.writeMessage(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_);
      }
      if (methodCase_ == 5) {
        output.writeMessage(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_);
      }
      if (methodCase_ == 6) {
        output.writeMessage(6, (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_);
      }
      if (methodCase_ == 7) {
        output.writeMessage(7, (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_);
      }
      if (methodCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_);
      }
      if (methodCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_);
      }
      if (methodCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 2:
          if (!getExists()
              .equals(other.getExists())) return false;
          break;
        case 3:
          if (!getGet()
              .equals(other.getGet())) return false;
          break;
        case 4:
          if (!getListStatePut()
              .equals(other.getListStatePut())) return false;
          break;
        case 5:
          if (!getAppendValue()
              .equals(other.getAppendValue())) return false;
          break;
        case 6:
          if (!getAppendList()
              .equals(other.getAppendList())) return false;
          break;
        case 7:
          if (!getClear()
              .equals(other.getClear())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATENAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      switch (methodCase_) {
        case 2:
          hash = (37 * hash) + EXISTS_FIELD_NUMBER;
          hash = (53 * hash) + getExists().hashCode();
          break;
        case 3:
          hash = (37 * hash) + GET_FIELD_NUMBER;
          hash = (53 * hash) + getGet().hashCode();
          break;
        case 4:
          hash = (37 * hash) + LISTSTATEPUT_FIELD_NUMBER;
          hash = (53 * hash) + getListStatePut().hashCode();
          break;
        case 5:
          hash = (37 * hash) + APPENDVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getAppendValue().hashCode();
          break;
        case 6:
          hash = (37 * hash) + APPENDLIST_FIELD_NUMBER;
          hash = (53 * hash) + getAppendList().hashCode();
          break;
        case 7:
          hash = (37 * hash) + CLEAR_FIELD_NUMBER;
          hash = (53 * hash) + getClear().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStateCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ListStateCall)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stateName_ = "";

        if (existsBuilder_ != null) {
          existsBuilder_.clear();
        }
        if (getBuilder_ != null) {
          getBuilder_.clear();
        }
        if (listStatePutBuilder_ != null) {
          listStatePutBuilder_.clear();
        }
        if (appendValueBuilder_ != null) {
          appendValueBuilder_.clear();
        }
        if (appendListBuilder_ != null) {
          appendListBuilder_.clear();
        }
        if (clearBuilder_ != null) {
          clearBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall(this);
        result.stateName_ = stateName_;
        if (methodCase_ == 2) {
          if (existsBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = existsBuilder_.build();
          }
        }
        if (methodCase_ == 3) {
          if (getBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = getBuilder_.build();
          }
        }
        if (methodCase_ == 4) {
          if (listStatePutBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = listStatePutBuilder_.build();
          }
        }
        if (methodCase_ == 5) {
          if (appendValueBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = appendValueBuilder_.build();
          }
        }
        if (methodCase_ == 6) {
          if (appendListBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = appendListBuilder_.build();
          }
        }
        if (methodCase_ == 7) {
          if (clearBuilder_ == null) {
            result.method_ = method_;
          } else {
            result.method_ = clearBuilder_.build();
          }
        }
        result.methodCase_ = methodCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          onChanged();
        }
        switch (other.getMethodCase()) {
          case EXISTS: {
            mergeExists(other.getExists());
            break;
          }
          case GET: {
            mergeGet(other.getGet());
            break;
          }
          case LISTSTATEPUT: {
            mergeListStatePut(other.getListStatePut());
            break;
          }
          case APPENDVALUE: {
            mergeAppendValue(other.getAppendValue());
            break;
          }
          case APPENDLIST: {
            mergeAppendList(other.getAppendList());
            break;
          }
          case CLEAR: {
            mergeClear(other.getClear());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stateName_ = input.readStringRequireUtf8();

                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getExistsFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getGetFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getListStatePutFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 4;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getAppendValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 5;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getAppendListFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 6;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getClearFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 7;
                break;
              } // case 58
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object stateName_ = "";
      /**
       * <code>string stateName = 1;</code>
       * @return The stateName.
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @return The bytes for stateName.
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateName() {
        
        stateName_ = getDefaultInstance().getStateName();
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The bytes for stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stateName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> existsBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       * @return Whether the exists field is set.
       */
      @java.lang.Override
      public boolean hasExists() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       * @return The exists.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return existsBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder setExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          existsBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder setExists(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder builderForValue) {
        if (existsBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          existsBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder mergeExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            existsBuilder_.mergeFrom(value);
          } else {
            existsBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public Builder clearExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          existsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder getExistsBuilder() {
        return getExistsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
        if ((methodCase_ == 2) && (existsBuilder_ != null)) {
          return existsBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> 
          getExistsFieldBuilder() {
        if (existsBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
          }
          existsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();;
        return existsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> getBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       * @return Whether the get field is set.
       */
      @java.lang.Override
      public boolean hasGet() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       * @return The get.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return getBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder setGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder setGet(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder builderForValue) {
        if (getBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder mergeGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            getBuilder_.mergeFrom(value);
          } else {
            getBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public Builder clearGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          getBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder getGetBuilder() {
        return getGetFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
        if ((methodCase_ == 3) && (getBuilder_ != null)) {
          return getBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> 
          getGetFieldBuilder() {
        if (getBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
          }
          getBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();;
        return getBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder> listStatePutBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       * @return Whether the listStatePut field is set.
       */
      @java.lang.Override
      public boolean hasListStatePut() {
        return methodCase_ == 4;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       * @return The listStatePut.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getListStatePut() {
        if (listStatePutBuilder_ == null) {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
        } else {
          if (methodCase_ == 4) {
            return listStatePutBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      public Builder setListStatePut(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut value) {
        if (listStatePutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          listStatePutBuilder_.setMessage(value);
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      public Builder setListStatePut(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder builderForValue) {
        if (listStatePutBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          listStatePutBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      public Builder mergeListStatePut(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut value) {
        if (listStatePutBuilder_ == null) {
          if (methodCase_ == 4 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 4) {
            listStatePutBuilder_.mergeFrom(value);
          } else {
            listStatePutBuilder_.setMessage(value);
          }
        }
        methodCase_ = 4;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      public Builder clearListStatePut() {
        if (listStatePutBuilder_ == null) {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 4) {
            methodCase_ = 0;
            method_ = null;
          }
          listStatePutBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder getListStatePutBuilder() {
        return getListStatePutFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder getListStatePutOrBuilder() {
        if ((methodCase_ == 4) && (listStatePutBuilder_ != null)) {
          return listStatePutBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 4) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStatePut listStatePut = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder> 
          getListStatePutFieldBuilder() {
        if (listStatePutBuilder_ == null) {
          if (!(methodCase_ == 4)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
          }
          listStatePutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 4;
        onChanged();;
        return listStatePutBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder> appendValueBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       * @return Whether the appendValue field is set.
       */
      @java.lang.Override
      public boolean hasAppendValue() {
        return methodCase_ == 5;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       * @return The appendValue.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getAppendValue() {
        if (appendValueBuilder_ == null) {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
        } else {
          if (methodCase_ == 5) {
            return appendValueBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      public Builder setAppendValue(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue value) {
        if (appendValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          appendValueBuilder_.setMessage(value);
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      public Builder setAppendValue(
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder builderForValue) {
        if (appendValueBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          appendValueBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      public Builder mergeAppendValue(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue value) {
        if (appendValueBuilder_ == null) {
          if (methodCase_ == 5 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 5) {
            appendValueBuilder_.mergeFrom(value);
          } else {
            appendValueBuilder_.setMessage(value);
          }
        }
        methodCase_ = 5;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      public Builder clearAppendValue() {
        if (appendValueBuilder_ == null) {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 5) {
            methodCase_ = 0;
            method_ = null;
          }
          appendValueBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder getAppendValueBuilder() {
        return getAppendValueFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder getAppendValueOrBuilder() {
        if ((methodCase_ == 5) && (appendValueBuilder_ != null)) {
          return appendValueBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 5) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendValue appendValue = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder> 
          getAppendValueFieldBuilder() {
        if (appendValueBuilder_ == null) {
          if (!(methodCase_ == 5)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
          }
          appendValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 5;
        onChanged();;
        return appendValueBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder> appendListBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       * @return Whether the appendList field is set.
       */
      @java.lang.Override
      public boolean hasAppendList() {
        return methodCase_ == 6;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       * @return The appendList.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getAppendList() {
        if (appendListBuilder_ == null) {
          if (methodCase_ == 6) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
        } else {
          if (methodCase_ == 6) {
            return appendListBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      public Builder setAppendList(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList value) {
        if (appendListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          appendListBuilder_.setMessage(value);
        }
        methodCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      public Builder setAppendList(
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder builderForValue) {
        if (appendListBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          appendListBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      public Builder mergeAppendList(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList value) {
        if (appendListBuilder_ == null) {
          if (methodCase_ == 6 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 6) {
            appendListBuilder_.mergeFrom(value);
          } else {
            appendListBuilder_.setMessage(value);
          }
        }
        methodCase_ = 6;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      public Builder clearAppendList() {
        if (appendListBuilder_ == null) {
          if (methodCase_ == 6) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 6) {
            methodCase_ = 0;
            method_ = null;
          }
          appendListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder getAppendListBuilder() {
        return getAppendListFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder getAppendListOrBuilder() {
        if ((methodCase_ == 6) && (appendListBuilder_ != null)) {
          return appendListBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 6) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.AppendList appendList = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder> 
          getAppendListFieldBuilder() {
        if (appendListBuilder_ == null) {
          if (!(methodCase_ == 6)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
          }
          appendListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 6;
        onChanged();;
        return appendListBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder> clearBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       * @return Whether the clear field is set.
       */
      @java.lang.Override
      public boolean hasClear() {
        return methodCase_ == 7;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       * @return The clear.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getClear() {
        if (clearBuilder_ == null) {
          if (methodCase_ == 7) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        } else {
          if (methodCase_ == 7) {
            return clearBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      public Builder setClear(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear value) {
        if (clearBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          clearBuilder_.setMessage(value);
        }
        methodCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      public Builder setClear(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder builderForValue) {
        if (clearBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          clearBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      public Builder mergeClear(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear value) {
        if (clearBuilder_ == null) {
          if (methodCase_ == 7 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 7) {
            clearBuilder_.mergeFrom(value);
          } else {
            clearBuilder_.setMessage(value);
          }
        }
        methodCase_ = 7;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      public Builder clearClear() {
        if (clearBuilder_ == null) {
          if (methodCase_ == 7) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 7) {
            methodCase_ = 0;
            method_ = null;
          }
          clearBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder getClearBuilder() {
        return getClearFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder getClearOrBuilder() {
        if ((methodCase_ == 7) && (clearBuilder_ != null)) {
          return clearBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 7) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Clear clear = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder> 
          getClearFieldBuilder() {
        if (clearBuilder_ == null) {
          if (!(methodCase_ == 7)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
          }
          clearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Clear, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 7;
        onChanged();;
        return clearBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ListStateCall)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ListStateCall)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ListStateCall>
        PARSER = new com.google.protobuf.AbstractParser<ListStateCall>() {
      @java.lang.Override
      public ListStateCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ListStateCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ListStateCall> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SetImplicitKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.SetImplicitKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes key = 1;</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetImplicitKey}
   */
  public static final class SetImplicitKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.SetImplicitKey)
      SetImplicitKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetImplicitKey.newBuilder() to construct.
    private SetImplicitKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetImplicitKey() {
      key_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SetImplicitKey();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_;
    /**
     * <code>bytes key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey other = (org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetImplicitKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.SetImplicitKey)
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey result = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey(this);
        result.key_ = key_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();

                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <code>bytes key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.SetImplicitKey)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.SetImplicitKey)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SetImplicitKey>
        PARSER = new com.google.protobuf.AbstractParser<SetImplicitKey>() {
      @java.lang.Override
      public SetImplicitKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SetImplicitKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetImplicitKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetImplicitKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RemoveImplicitKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey}
   */
  public static final class RemoveImplicitKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey)
      RemoveImplicitKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RemoveImplicitKey.newBuilder() to construct.
    private RemoveImplicitKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RemoveImplicitKey() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RemoveImplicitKey();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.class, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey other = (org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey)
        org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.class, org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey result = new org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.RemoveImplicitKey)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RemoveImplicitKey>
        PARSER = new com.google.protobuf.AbstractParser<RemoveImplicitKey>() {
      @java.lang.Override
      public RemoveImplicitKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RemoveImplicitKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RemoveImplicitKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RemoveImplicitKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExistsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Exists)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Exists}
   */
  public static final class Exists extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Exists)
      ExistsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exists.newBuilder() to construct.
    private Exists(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exists() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Exists();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Exists)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Exists other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Exists}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Exists)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Exists result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Exists result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Exists(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Exists)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Exists)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Exists)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Exists DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Exists();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exists>
        PARSER = new com.google.protobuf.AbstractParser<Exists>() {
      @java.lang.Override
      public Exists parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Exists> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exists> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Get)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Get}
   */
  public static final class Get extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Get)
      GetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Get.newBuilder() to construct.
    private Get(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Get() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Get();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Get.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Get)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Get other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Get prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Get}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Get)
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Get.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Get.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Get result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Get result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Get(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Get) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Get)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Get other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Get)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Get)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Get DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Get();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Get>
        PARSER = new com.google.protobuf.AbstractParser<Get>() {
      @java.lang.Override
      public Get parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Get> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Get> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RegisterTimerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.RegisterTimer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    long getExpiryTimestampMs();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.RegisterTimer}
   */
  public static final class RegisterTimer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.RegisterTimer)
      RegisterTimerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RegisterTimer.newBuilder() to construct.
    private RegisterTimer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RegisterTimer() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RegisterTimer();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.class, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder.class);
    }

    public static final int EXPIRYTIMESTAMPMS_FIELD_NUMBER = 1;
    private long expiryTimestampMs_;
    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    @java.lang.Override
    public long getExpiryTimestampMs() {
      return expiryTimestampMs_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expiryTimestampMs_ != 0L) {
        output.writeInt64(1, expiryTimestampMs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expiryTimestampMs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, expiryTimestampMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer other = (org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) obj;

      if (getExpiryTimestampMs()
          != other.getExpiryTimestampMs()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPIRYTIMESTAMPMS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getExpiryTimestampMs());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.RegisterTimer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.RegisterTimer)
        org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.class, org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        expiryTimestampMs_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer result = new org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer(this);
        result.expiryTimestampMs_ = expiryTimestampMs_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer.getDefaultInstance()) return this;
        if (other.getExpiryTimestampMs() != 0L) {
          setExpiryTimestampMs(other.getExpiryTimestampMs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                expiryTimestampMs_ = input.readInt64();

                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private long expiryTimestampMs_ ;
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return The expiryTimestampMs.
       */
      @java.lang.Override
      public long getExpiryTimestampMs() {
        return expiryTimestampMs_;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @param value The expiryTimestampMs to set.
       * @return This builder for chaining.
       */
      public Builder setExpiryTimestampMs(long value) {
        
        expiryTimestampMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiryTimestampMs() {
        
        expiryTimestampMs_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.RegisterTimer)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.RegisterTimer)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RegisterTimer>
        PARSER = new com.google.protobuf.AbstractParser<RegisterTimer>() {
      @java.lang.Override
      public RegisterTimer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RegisterTimer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RegisterTimer> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.RegisterTimer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DeleteTimersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.DeleteTimers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    long getExpiryTimestampMs();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.DeleteTimers}
   */
  public static final class DeleteTimers extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.DeleteTimers)
      DeleteTimersOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DeleteTimers.newBuilder() to construct.
    private DeleteTimers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DeleteTimers() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DeleteTimers();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.class, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder.class);
    }

    public static final int EXPIRYTIMESTAMPMS_FIELD_NUMBER = 1;
    private long expiryTimestampMs_;
    /**
     * <code>int64 expiryTimestampMs = 1;</code>
     * @return The expiryTimestampMs.
     */
    @java.lang.Override
    public long getExpiryTimestampMs() {
      return expiryTimestampMs_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expiryTimestampMs_ != 0L) {
        output.writeInt64(1, expiryTimestampMs_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expiryTimestampMs_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, expiryTimestampMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers other = (org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) obj;

      if (getExpiryTimestampMs()
          != other.getExpiryTimestampMs()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPIRYTIMESTAMPMS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getExpiryTimestampMs());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.DeleteTimers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.DeleteTimers)
        org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.class, org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        expiryTimestampMs_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers result = new org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers(this);
        result.expiryTimestampMs_ = expiryTimestampMs_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers.getDefaultInstance()) return this;
        if (other.getExpiryTimestampMs() != 0L) {
          setExpiryTimestampMs(other.getExpiryTimestampMs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                expiryTimestampMs_ = input.readInt64();

                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private long expiryTimestampMs_ ;
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return The expiryTimestampMs.
       */
      @java.lang.Override
      public long getExpiryTimestampMs() {
        return expiryTimestampMs_;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @param value The expiryTimestampMs to set.
       * @return This builder for chaining.
       */
      public Builder setExpiryTimestampMs(long value) {
        
        expiryTimestampMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 expiryTimestampMs = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiryTimestampMs() {
        
        expiryTimestampMs_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.DeleteTimers)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.DeleteTimers)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DeleteTimers>
        PARSER = new com.google.protobuf.AbstractParser<DeleteTimers>() {
      @java.lang.Override
      public DeleteTimers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DeleteTimers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DeleteTimers> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.DeleteTimers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ListTimersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ListTimers)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListTimers}
   */
  public static final class ListTimers extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ListTimers)
      ListTimersOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ListTimers.newBuilder() to construct.
    private ListTimers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ListTimers() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ListTimers();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListTimers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ListTimers)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ListTimers)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ListTimers)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ListTimers>
        PARSER = new com.google.protobuf.AbstractParser<ListTimers>() {
      @java.lang.Override
      public ListTimers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ListTimers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ListTimers> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListTimers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueStateUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ValueStateUpdate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes value = 1;</code>
     * @return The value.
     */
    com.google.protobuf.ByteString getValue();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ValueStateUpdate}
   */
  public static final class ValueStateUpdate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ValueStateUpdate)
      ValueStateUpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ValueStateUpdate.newBuilder() to construct.
    private ValueStateUpdate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ValueStateUpdate() {
      value_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ValueStateUpdate();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString value_;
    /**
     * <code>bytes value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!value_.isEmpty()) {
        output.writeBytes(1, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) obj;

      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ValueStateUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ValueStateUpdate)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        value_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate(this);
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate.getDefaultInstance()) return this;
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                value_ = input.readBytes();

                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>bytes value = 1;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ValueStateUpdate)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ValueStateUpdate)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueStateUpdate>
        PARSER = new com.google.protobuf.AbstractParser<ValueStateUpdate>() {
      @java.lang.Override
      public ValueStateUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ValueStateUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueStateUpdate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ValueStateUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClearOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Clear)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Clear}
   */
  public static final class Clear extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Clear)
      ClearOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Clear.newBuilder() to construct.
    private Clear(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Clear() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Clear();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Clear_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Clear)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Clear other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Clear}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Clear)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ClearOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Clear_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Clear result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Clear result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Clear(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Clear) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Clear)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Clear other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Clear.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Clear)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Clear)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Clear DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Clear();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Clear>
        PARSER = new com.google.protobuf.AbstractParser<Clear>() {
      @java.lang.Override
      public Clear parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Clear> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Clear> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Clear getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ListStatePutOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ListStatePut)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStatePut}
   */
  public static final class ListStatePut extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ListStatePut)
      ListStatePutOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ListStatePut.newBuilder() to construct.
    private ListStatePut(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ListStatePut() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ListStatePut();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStatePut}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ListStatePut)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePutOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ListStatePut)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ListStatePut)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ListStatePut>
        PARSER = new com.google.protobuf.AbstractParser<ListStatePut>() {
      @java.lang.Override
      public ListStatePut parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ListStatePut> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ListStatePut> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStatePut getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AppendValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.AppendValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes value = 1;</code>
     * @return The value.
     */
    com.google.protobuf.ByteString getValue();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.AppendValue}
   */
  public static final class AppendValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.AppendValue)
      AppendValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AppendValue.newBuilder() to construct.
    private AppendValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AppendValue() {
      value_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AppendValue();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.class, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString value_;
    /**
     * <code>bytes value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!value_.isEmpty()) {
        output.writeBytes(1, value_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue other = (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) obj;

      if (!getValue()
          .equals(other.getValue())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.AppendValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.AppendValue)
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.class, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        value_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue result = new org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue(this);
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue.getDefaultInstance()) return this;
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                value_ = input.readBytes();

                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>bytes value = 1;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.AppendValue)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.AppendValue)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AppendValue>
        PARSER = new com.google.protobuf.AbstractParser<AppendValue>() {
      @java.lang.Override
      public AppendValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AppendValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AppendValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AppendListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.AppendList)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.AppendList}
   */
  public static final class AppendList extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.AppendList)
      AppendListOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AppendList.newBuilder() to construct.
    private AppendList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AppendList() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AppendList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.class, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList other = (org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.AppendList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.AppendList)
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.class, org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList result = new org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.AppendList)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.AppendList)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AppendList>
        PARSER = new com.google.protobuf.AbstractParser<AppendList>() {
      @java.lang.Override
      public AppendList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AppendList> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AppendList> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.AppendList getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SetHandleStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.SetHandleState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    int getStateValue();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The state.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetHandleState}
   */
  public static final class SetHandleState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.SetHandleState)
      SetHandleStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetHandleState.newBuilder() to construct.
    private SetHandleState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetHandleState() {
      state_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SetHandleState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder.class);
    }

    public static final int STATE_FIELD_NUMBER = 1;
    private int state_;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    @java.lang.Override public int getStateValue() {
      return state_;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The state.
     */
    @java.lang.Override public org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState() {
      @SuppressWarnings("deprecation")
      org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState result = org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.valueOf(state_);
      return result == null ? org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (state_ != org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.CREATED.getNumber()) {
        output.writeEnum(1, state_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (state_ != org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.CREATED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState other = (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) obj;

      if (state_ != other.state_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_FIELD_NUMBER;
      hash = (53 * hash) + state_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetHandleState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.SetHandleState)
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        state_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState result = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState(this);
        result.state_ = state_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance()) return this;
        if (other.state_ != 0) {
          setStateValue(other.getStateValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                state_ = input.readEnum();

                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }

      private int state_ = 0;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return The enum numeric value on the wire for state.
       */
      @java.lang.Override public int getStateValue() {
        return state_;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @param value The enum numeric value on the wire for state to set.
       * @return This builder for chaining.
       */
      public Builder setStateValue(int value) {
        
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return The state.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState() {
        @SuppressWarnings("deprecation")
        org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState result = org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.valueOf(state_);
        return result == null ? org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        
        state_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.SetHandleState)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.SetHandleState)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SetHandleState>
        PARSER = new com.google.protobuf.AbstractParser<SetHandleState>() {
      @java.lang.Override
      public SetHandleState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SetHandleState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetHandleState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Clear_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022StateMessage.proto\022.org.apache.spark.s" +
      "ql.execution.streaming.state\"\277\003\n\014StateRe" +
      "quest\022\017\n\007version\030\001 \001(\005\022f\n\025statefulProces" +
      "sorCall\030\002 \001(\0132E.org.apache.spark.sql.exe" +
      "cution.streaming.state.StatefulProcessor" +
      "CallH\000\022d\n\024stateVariableRequest\030\003 \001(\0132D.o" +
      "rg.apache.spark.sql.execution.streaming." +
      "state.StateVariableRequestH\000\022p\n\032implicit" +
      "GroupingKeyRequest\030\004 \001(\0132J.org.apache.sp" +
      "ark.sql.execution.streaming.state.Implic" +
      "itGroupingKeyRequestH\000\022T\n\014timerRequest\030\005" +
      " \001(\0132<.org.apache.spark.sql.execution.st" +
      "reaming.state.TimerRequestH\000B\010\n\006method\"H" +
      "\n\rStateResponse\022\022\n\nstatusCode\030\001 \001(\005\022\024\n\014e" +
      "rrorMessage\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\"\352\003\n\025Sta" +
      "tefulProcessorCall\022X\n\016setHandleState\030\001 \001" +
      "(\0132>.org.apache.spark.sql.execution.stre" +
      "aming.state.SetHandleStateH\000\022Y\n\rgetValue" +
      "State\030\002 \001(\0132@.org.apache.spark.sql.execu" +
      "tion.streaming.state.StateCallCommandH\000\022" +
      "X\n\014getListState\030\003 \001(\0132@.org.apache.spark" +
      ".sql.execution.streaming.state.StateCall" +
      "CommandH\000\022W\n\013getMapState\030\004 \001(\0132@.org.apa" +
      "che.spark.sql.execution.streaming.state." +
      "StateCallCommandH\000\022_\n\016timerStateCall\030\005 \001" +
      "(\0132E.org.apache.spark.sql.execution.stre" +
      "aming.state.TimerStateCallCommandH\000B\010\n\006m" +
      "ethod\"\322\001\n\024StateVariableRequest\022X\n\016valueS" +
      "tateCall\030\001 \001(\0132>.org.apache.spark.sql.ex" +
      "ecution.streaming.state.ValueStateCallH\000" +
      "\022V\n\rlistStateCall\030\002 \001(\0132=.org.apache.spa" +
      "rk.sql.execution.streaming.state.ListSta" +
      "teCallH\000B\010\n\006method\"\340\001\n\032ImplicitGroupingK" +
      "eyRequest\022X\n\016setImplicitKey\030\001 \001(\0132>.org." +
      "apache.spark.sql.execution.streaming.sta" +
      "te.SetImplicitKeyH\000\022^\n\021removeImplicitKey" +
      "\030\002 \001(\0132A.org.apache.spark.sql.execution." +
      "streaming.state.RemoveImplicitKeyH\000B\010\n\006m" +
      "ethod\"\332\001\n\014TimerRequest\022^\n\021timerValueRequ" +
      "est\030\001 \001(\0132A.org.apache.spark.sql.executi" +
      "on.streaming.state.TimerValueRequestH\000\022`" +
      "\n\022expiryTimerRequest\030\002 \001(\0132B.org.apache." +
      "spark.sql.execution.streaming.state.Expi" +
      "ryTimerRequestH\000B\010\n\006method\"\324\001\n\021TimerValu" +
      "eRequest\022_\n\022getProcessingTimer\030\001 \001(\0132A.o" +
      "rg.apache.spark.sql.execution.streaming." +
      "state.GetProcessingTimeH\000\022T\n\014getWatermar" +
      "k\030\002 \001(\0132<.org.apache.spark.sql.execution" +
      ".streaming.state.GetWatermarkH\000B\010\n\006metho" +
      "d\"/\n\022ExpiryTimerRequest\022\031\n\021expiryTimesta" +
      "mpMs\030\001 \001(\003\"\023\n\021GetProcessingTime\"\016\n\014GetWa" +
      "termark\"5\n\020StateCallCommand\022\021\n\tstateName" +
      "\030\001 \001(\t\022\016\n\006schema\030\002 \001(\t\"\220\002\n\025TimerStateCal" +
      "lCommand\022Q\n\010register\030\001 \001(\0132=.org.apache." +
      "spark.sql.execution.streaming.state.Regi" +
      "sterTimerH\000\022N\n\006delete\030\002 \001(\0132<.org.apache" +
      ".spark.sql.execution.streaming.state.Del" +
      "eteTimersH\000\022J\n\004list\030\003 \001(\0132:.org.apache.s" +
      "park.sql.execution.streaming.state.ListT" +
      "imersH\000B\010\n\006method\"\341\002\n\016ValueStateCall\022\021\n\t" +
      "stateName\030\001 \001(\t\022H\n\006exists\030\002 \001(\01326.org.ap" +
      "ache.spark.sql.execution.streaming.state" +
      ".ExistsH\000\022B\n\003get\030\003 \001(\01323.org.apache.spar" +
      "k.sql.execution.streaming.state.GetH\000\022\\\n" +
      "\020valueStateUpdate\030\004 \001(\0132@.org.apache.spa" +
      "rk.sql.execution.streaming.state.ValueSt" +
      "ateUpdateH\000\022F\n\005clear\030\005 \001(\01325.org.apache." +
      "spark.sql.execution.streaming.state.Clea" +
      "rH\000B\010\n\006method\"\376\003\n\rListStateCall\022\021\n\tstate" +
      "Name\030\001 \001(\t\022H\n\006exists\030\002 \001(\01326.org.apache." +
      "spark.sql.execution.streaming.state.Exis" +
      "tsH\000\022B\n\003get\030\003 \001(\01323.org.apache.spark.sql" +
      ".execution.streaming.state.GetH\000\022T\n\014list" +
      "StatePut\030\004 \001(\0132<.org.apache.spark.sql.ex" +
      "ecution.streaming.state.ListStatePutH\000\022R" +
      "\n\013appendValue\030\005 \001(\0132;.org.apache.spark.s" +
      "ql.execution.streaming.state.AppendValue" +
      "H\000\022P\n\nappendList\030\006 \001(\0132:.org.apache.spar" +
      "k.sql.execution.streaming.state.AppendLi" +
      "stH\000\022F\n\005clear\030\007 \001(\01325.org.apache.spark.s" +
      "ql.execution.streaming.state.ClearH\000B\010\n\006" +
      "method\"\035\n\016SetImplicitKey\022\013\n\003key\030\001 \001(\014\"\023\n" +
      "\021RemoveImplicitKey\"\010\n\006Exists\"\005\n\003Get\"*\n\rR" +
      "egisterTimer\022\031\n\021expiryTimestampMs\030\001 \001(\003\"" +
      ")\n\014DeleteTimers\022\031\n\021expiryTimestampMs\030\001 \001" +
      "(\003\"\014\n\nListTimers\"!\n\020ValueStateUpdate\022\r\n\005" +
      "value\030\001 \001(\014\"\007\n\005Clear\"\016\n\014ListStatePut\"\034\n\013" +
      "AppendValue\022\r\n\005value\030\001 \001(\014\"\014\n\nAppendList" +
      "\"\\\n\016SetHandleState\022J\n\005state\030\001 \001(\0162;.org." +
      "apache.spark.sql.execution.streaming.sta" +
      "te.HandleState*`\n\013HandleState\022\013\n\007CREATED" +
      "\020\000\022\017\n\013INITIALIZED\020\001\022\022\n\016DATA_PROCESSED\020\002\022" +
      "\023\n\017TIMER_PROCESSED\020\003\022\n\n\006CLOSED\020\004b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor,
        new java.lang.String[] { "Version", "StatefulProcessorCall", "StateVariableRequest", "ImplicitGroupingKeyRequest", "TimerRequest", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor,
        new java.lang.String[] { "StatusCode", "ErrorMessage", "Value", });
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorCall_descriptor,
        new java.lang.String[] { "SetHandleState", "GetValueState", "GetListState", "GetMapState", "TimerStateCall", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateVariableRequest_descriptor,
        new java.lang.String[] { "ValueStateCall", "ListStateCall", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ImplicitGroupingKeyRequest_descriptor,
        new java.lang.String[] { "SetImplicitKey", "RemoveImplicitKey", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_TimerRequest_descriptor,
        new java.lang.String[] { "TimerValueRequest", "ExpiryTimerRequest", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_TimerValueRequest_descriptor,
        new java.lang.String[] { "GetProcessingTimer", "GetWatermark", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ExpiryTimerRequest_descriptor,
        new java.lang.String[] { "ExpiryTimestampMs", });
    internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_GetProcessingTime_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_GetWatermark_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateCallCommand_descriptor,
        new java.lang.String[] { "StateName", "Schema", });
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_TimerStateCallCommand_descriptor,
        new java.lang.String[] { "Register", "Delete", "List", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateCall_descriptor,
        new java.lang.String[] { "StateName", "Exists", "Get", "ValueStateUpdate", "Clear", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor,
        new java.lang.String[] { "StateName", "Exists", "Get", "ListStatePut", "AppendValue", "AppendList", "Clear", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_SetImplicitKey_descriptor,
        new java.lang.String[] { "Key", });
    internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_RemoveImplicitKey_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_RegisterTimer_descriptor,
        new java.lang.String[] { "ExpiryTimestampMs", });
    internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_DeleteTimers_descriptor,
        new java.lang.String[] { "ExpiryTimestampMs", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ListTimers_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ValueStateUpdate_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_org_apache_spark_sql_execution_streaming_state_Clear_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Clear_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ListStatePut_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_AppendValue_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_AppendList_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor,
        new java.lang.String[] { "State", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
